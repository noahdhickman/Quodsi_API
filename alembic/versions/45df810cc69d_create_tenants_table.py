"""create tenants table

Revision ID: 45df810cc69d
Revises: 
Create Date: 2025-05-28 13:41:53.499709

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mssql

# revision identifiers, used by Alembic.
revision: str = '45df810cc69d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tenants',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Display name of the tenant organization'),
    sa.Column('subdomain', sa.String(length=100), nullable=False, comment="Unique subdomain for tenant (e.g., 'acme' in acme.quodsi.com)"),
    sa.Column('slug', sa.String(length=100), nullable=False, comment="URL-friendly identifier for tenant (e.g., 'acme-corp')"),
    sa.Column('plan_type', sa.String(length=50), nullable=False, comment='Subscription plan: trial, starter, professional, enterprise'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Tenant status: trial, active, suspended, cancelled, deleted'),
    sa.Column('max_users', sa.Integer(), nullable=False, comment='Maximum number of users allowed'),
    sa.Column('max_models', sa.Integer(), nullable=False, comment='Maximum number of models allowed'),
    sa.Column('max_scenarios_per_month', sa.Integer(), nullable=False, comment='Maximum scenarios that can be run per month'),
    sa.Column('max_storage_gb', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='Maximum storage allowed in GB'),
    sa.Column('trial_expires_at', sa.DateTime(), nullable=True, comment='When trial period expires (null for paid plans)'),
    sa.Column('activated_at', sa.DateTime(), nullable=True, comment='When tenant was activated (upgraded from trial)'),
    sa.Column('stripe_customer_id', sa.String(length=255), nullable=True, comment='Stripe customer ID for billing integration'),
    sa.Column('billing_email', sa.String(length=255), nullable=True, comment='Primary email for billing communications'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=True, comment='Nullable for tenants table'),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id'),
    sa.UniqueConstraint('slug', name='uq_tenants_slug'),
    sa.UniqueConstraint('subdomain', name='uq_tenants_subdomain')
    )
    # Critical missing indexes from BaseEntity - manually added
    # Clustered index on index_id for optimal insert performance  
    op.create_index(
        'ix_tenants_index_id',
        'tenants', 
        ['index_id'],
        unique=True,
        mssql_clustered=True
    )

    # Filtered index for active tenants (most common query pattern)
    op.create_index(
        'ix_tenants_active',
        'tenants',
        ['is_deleted'], 
        mssql_where='is_deleted = 0'
    )
    op.create_index(op.f('ix_tenants_is_deleted'), 'tenants', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_tenants_tenant_id'), 'tenants', ['tenant_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_tenants_tenant_id'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_is_deleted'), table_name='tenants')
    op.drop_table('tenants')
    # ### end Alembic commands ###

"""initial

Revision ID: f86cc30a5be4
Revises: 
Create Date: 2025-06-03 12:26:43.189757

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mssql

# revision identifiers, used by Alembic.
revision: str = 'f86cc30a5be4'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('organizations',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Organization name'),
    sa.Column('domain', sa.String(length=255), nullable=True, comment='Primary email domain for the organization'),
    sa.Column('billing_email', sa.String(length=255), nullable=True, comment='Billing contact email address'),
    sa.Column('billing_address', sa.NVARCHAR(), nullable=True, comment='Billing address details'),
    sa.Column('stripe_customer_id', sa.String(length=255), nullable=True, comment='Stripe customer identifier for billing'),
    sa.Column('metadata', sa.NVARCHAR(), nullable=True, comment='Additional organization information (JSON data)'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.CheckConstraint("domain IS NULL OR domain LIKE '%.%'", name='ck_organizations_domain_format'),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id')
    )
    op.create_index('ix_organizations_index_id', 'organizations', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index(op.f('ix_organizations_is_deleted'), 'organizations', ['is_deleted'], unique=False)
    op.create_index('ix_organizations_stripe_customer_id', 'organizations', ['stripe_customer_id'], unique=False, mssql_where='stripe_customer_id IS NOT NULL')
    op.create_index('ix_organizations_tenant_active', 'organizations', ['tenant_id', 'is_deleted', 'index_id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index('ix_organizations_tenant_domain', 'organizations', ['tenant_id', 'domain'], unique=False, mssql_where='domain IS NOT NULL AND is_deleted = 0')
    op.create_index(op.f('ix_organizations_tenant_id'), 'organizations', ['tenant_id'], unique=False)
    op.create_index('ix_organizations_tenant_id_lookup', 'organizations', ['tenant_id', 'id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index('ix_organizations_tenant_name', 'organizations', ['tenant_id', 'name'], unique=True, mssql_where='is_deleted = 0')
    op.create_table('teams',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Team name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Team description'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id')
    )
    op.create_index('ix_teams_index_id', 'teams', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index(op.f('ix_teams_is_deleted'), 'teams', ['is_deleted'], unique=False)
    op.create_index('ix_teams_tenant_active', 'teams', ['tenant_id', 'is_deleted', 'index_id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index(op.f('ix_teams_tenant_id'), 'teams', ['tenant_id'], unique=False)
    op.create_index('ix_teams_tenant_id_lookup', 'teams', ['tenant_id', 'id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_table('tenants',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Display name of the tenant organization'),
    sa.Column('subdomain', sa.String(length=100), nullable=False, comment="Unique subdomain for tenant (e.g., 'acme' in acme.quodsi.com)"),
    sa.Column('slug', sa.String(length=100), nullable=False, comment="URL-friendly identifier for tenant (e.g., 'acme-corp')"),
    sa.Column('plan_type', sa.String(length=50), nullable=False, comment='Subscription plan: trial, starter, professional, enterprise'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Tenant status: trial, active, suspended, cancelled, deleted'),
    sa.Column('max_users', sa.Integer(), nullable=False, comment='Maximum number of users allowed'),
    sa.Column('max_models', sa.Integer(), nullable=False, comment='Maximum number of models allowed'),
    sa.Column('max_scenarios_per_month', sa.Integer(), nullable=False, comment='Maximum scenarios that can be run per month'),
    sa.Column('max_storage_gb', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='Maximum storage allowed in GB'),
    sa.Column('trial_expires_at', sa.DateTime(), nullable=True, comment='When trial period expires (null for paid plans)'),
    sa.Column('activated_at', sa.DateTime(), nullable=True, comment='When tenant was activated (upgraded from trial)'),
    sa.Column('stripe_customer_id', sa.String(length=255), nullable=True, comment='Stripe customer ID for billing integration'),
    sa.Column('billing_email', sa.String(length=255), nullable=True, comment='Primary email for billing communications'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=True, comment='Nullable for tenants table'),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id'),
    sa.UniqueConstraint('slug', name='uq_tenants_slug'),
    sa.UniqueConstraint('subdomain', name='uq_tenants_subdomain')
    )
    op.create_index('ix_tenants_index_id', 'tenants', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index(op.f('ix_tenants_is_deleted'), 'tenants', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_tenants_tenant_id'), 'tenants', ['tenant_id'], unique=False)
    op.create_table('users',
    sa.Column('identity_provider', sa.String(length=50), nullable=False, comment="Provider type ('entra_id', 'google', etc.)"),
    sa.Column('identity_provider_id', sa.String(length=255), nullable=False, comment='Unique identifier from the provider'),
    sa.Column('email', sa.String(length=255), nullable=False, comment="User's email address"),
    sa.Column('display_name', sa.String(length=255), nullable=False, comment="User's display name"),
    sa.Column('last_login_at', sa.DateTime(), nullable=True, comment='Most recent login timestamp'),
    sa.Column('login_count', sa.Integer(), nullable=False, comment='Count of user logins'),
    sa.Column('total_usage_minutes', sa.Integer(), nullable=False, comment='Cumulative time spent using Quodsi'),
    sa.Column('last_session_start', sa.DateTime(), nullable=True, comment='When current/last session started'),
    sa.Column('last_active_at', sa.DateTime(), nullable=True, comment='Last user activity timestamp'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='User status (active, invited, suspended)'),
    sa.Column('user_metadata', sa.String(length=4000), nullable=True, comment='Additional profile information (JSON data)'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='fk_users_tenant_id'),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('identity_provider', 'identity_provider_id', name='uq_users_identity_provider'),
    sa.UniqueConstraint('index_id'),
    sa.UniqueConstraint('tenant_id', 'email', name='uq_users_tenant_email')
    )
    op.create_index('ix_users_index_id', 'users', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index(op.f('ix_users_is_deleted'), 'users', ['is_deleted'], unique=False)
    op.create_index('ix_users_tenant_active', 'users', ['tenant_id', 'is_deleted', 'index_id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index(op.f('ix_users_tenant_id'), 'users', ['tenant_id'], unique=False)
    op.create_index('ix_users_tenant_id_lookup', 'users', ['tenant_id', 'id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_table('models',
    sa.Column('name', sa.NVARCHAR(length=255), nullable=False),
    sa.Column('description', sa.NVARCHAR(), nullable=True),
    sa.Column('source', sa.NVARCHAR(length=50), nullable=False),
    sa.Column('source_document_id', sa.NVARCHAR(length=255), nullable=True),
    sa.Column('source_url', sa.NVARCHAR(length=500), nullable=True),
    sa.Column('reps', sa.Integer(), nullable=False),
    sa.Column('forecast_days', sa.Integer(), nullable=False),
    sa.Column('random_seed', sa.Integer(), nullable=True),
    sa.Column('time_type', sa.NVARCHAR(length=20), nullable=False),
    sa.Column('one_clock_unit', sa.NVARCHAR(length=20), nullable=True),
    sa.Column('warmup_clock_period', sa.DECIMAL(precision=18, scale=6), nullable=True),
    sa.Column('run_clock_period', sa.DECIMAL(precision=18, scale=6), nullable=True),
    sa.Column('warmup_date_time', sa.DateTime(), nullable=True),
    sa.Column('start_date_time', sa.DateTime(), nullable=True),
    sa.Column('finish_date_time', sa.DateTime(), nullable=True),
    sa.Column('created_by_user_id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('organization_id', mssql.UNIQUEIDENTIFIER(), nullable=True),
    sa.Column('team_id', mssql.UNIQUEIDENTIFIER(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('is_template', sa.Boolean(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('blob_storage_url', sa.NVARCHAR(length=500), nullable=True),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.CheckConstraint("one_clock_unit IS NULL OR one_clock_unit IN ('seconds', 'minutes', 'hours', 'days')", name='ck_models_one_clock_unit'),
    sa.CheckConstraint("source IN ('lucidchart', 'standalone', 'miro')", name='ck_models_source'),
    sa.CheckConstraint("time_type IN ('clock', 'calendar')", name='ck_models_time_type'),
    sa.CheckConstraint('forecast_days >= 1', name='ck_models_forecast_days_positive'),
    sa.CheckConstraint('reps >= 1', name='ck_models_reps_positive'),
    sa.CheckConstraint('version >= 1', name='ck_models_version_positive'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id'),
    sa.UniqueConstraint('tenant_id', 'name', name='uq_models_tenant_name')
    )
    op.create_index('ix_models_index_id', 'models', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index(op.f('ix_models_is_deleted'), 'models', ['is_deleted'], unique=False)
    op.create_index('ix_models_is_public', 'models', ['is_public'], unique=False)
    op.create_index('ix_models_is_template', 'models', ['is_template'], unique=False)
    op.create_index('ix_models_tenant_created_by_user', 'models', ['tenant_id', 'created_by_user_id'], unique=False)
    op.create_index(op.f('ix_models_tenant_id'), 'models', ['tenant_id'], unique=False)
    op.create_index('ix_models_tenant_name', 'models', ['tenant_id', 'name'], unique=False)
    op.create_index('ix_models_tenant_organization', 'models', ['tenant_id', 'organization_id'], unique=False)
    op.create_index('ix_models_tenant_source', 'models', ['tenant_id', 'source'], unique=False)
    op.create_index('ix_models_tenant_team', 'models', ['tenant_id', 'team_id'], unique=False)
    op.create_table('organization_memberships',
    sa.Column('organization_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Organization this membership belongs to'),
    sa.Column('user_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='User who is a member of the organization'),
    sa.Column('role', sa.String(length=50), nullable=False, comment='User role: owner, admin, member, viewer'),
    sa.Column('invited_by_user_id', mssql.UNIQUEIDENTIFIER(), nullable=True, comment='User who invited this member'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Membership status: active, invited, suspended, left'),
    sa.Column('last_active_at', sa.DateTime(), nullable=True, comment='When the user was last active in this organization'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.CheckConstraint("role IN ('owner', 'admin', 'member', 'viewer')", name='ck_organization_memberships_role'),
    sa.CheckConstraint("status IN ('active', 'invited', 'suspended', 'left')", name='ck_organization_memberships_status'),
    sa.ForeignKeyConstraint(['invited_by_user_id'], ['users.id'], name='fk_organization_memberships_invited_by'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='fk_organization_memberships_organization'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_organization_memberships_user'),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id'),
    sa.UniqueConstraint('tenant_id', 'organization_id', 'user_id', name='uq_organization_memberships_tenant_org_user')
    )
    op.create_index('ix_organization_memberships_index_id', 'organization_memberships', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index('ix_organization_memberships_invitations', 'organization_memberships', ['tenant_id', 'status', 'created_at'], unique=False, mssql_where=sa.text("is_deleted = 0 AND status = 'invited'"))
    op.create_index(op.f('ix_organization_memberships_is_deleted'), 'organization_memberships', ['is_deleted'], unique=False)
    op.create_index('ix_organization_memberships_org_active', 'organization_memberships', ['tenant_id', 'organization_id', 'status'], unique=False, mssql_where=sa.text("is_deleted = 0 AND status = 'active'"))
    op.create_index(op.f('ix_organization_memberships_organization_id'), 'organization_memberships', ['organization_id'], unique=False)
    op.create_index('ix_organization_memberships_role_lookup', 'organization_memberships', ['tenant_id', 'organization_id', 'role'], unique=False, mssql_where=sa.text("is_deleted = 0 AND status = 'active'"))
    op.create_index('ix_organization_memberships_tenant_active', 'organization_memberships', ['tenant_id', 'is_deleted', 'index_id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index(op.f('ix_organization_memberships_tenant_id'), 'organization_memberships', ['tenant_id'], unique=False)
    op.create_index('ix_organization_memberships_tenant_id_lookup', 'organization_memberships', ['tenant_id', 'id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index('ix_organization_memberships_user_active', 'organization_memberships', ['tenant_id', 'user_id', 'status'], unique=False, mssql_where=sa.text("is_deleted = 0 AND status = 'active'"))
    op.create_index(op.f('ix_organization_memberships_user_id'), 'organization_memberships', ['user_id'], unique=False)
    op.create_table('user_sessions',
    sa.Column('user_id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('ended_at', sa.DateTime(), nullable=True),
    sa.Column('duration_minutes', sa.Integer(), nullable=True),
    sa.Column('session_type', sa.String(length=50), nullable=False),
    sa.Column('client_type', sa.String(length=100), nullable=False),
    sa.Column('client_info', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id')
    )
    op.create_index('ix_user_sessions_index_id', 'user_sessions', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index(op.f('ix_user_sessions_is_deleted'), 'user_sessions', ['is_deleted'], unique=False)
    op.create_index('ix_user_sessions_tenant_active', 'user_sessions', ['tenant_id', 'is_deleted', 'index_id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index(op.f('ix_user_sessions_tenant_id'), 'user_sessions', ['tenant_id'], unique=False)
    op.create_index('ix_user_sessions_tenant_id_lookup', 'user_sessions', ['tenant_id', 'id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index(op.f('ix_user_sessions_user_id'), 'user_sessions', ['user_id'], unique=False)
    op.create_table('analyses',
    sa.Column('name', sa.NVARCHAR(length=255), nullable=False, comment='Name of the analysis study'),
    sa.Column('description', sa.NVARCHAR(), nullable=True, comment='Description of the analysis study'),
    sa.Column('model_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Parent model this analysis belongs to'),
    sa.Column('default_reps', sa.Integer(), nullable=False, comment='Default number of replications for child scenarios'),
    sa.Column('default_time_period', sa.NVARCHAR(length=50), nullable=False, comment='Default time period for child scenarios'),
    sa.Column('created_by_user_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='User who created the analysis'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.CheckConstraint("default_time_period IN ('hourly', 'daily', 'monthly')", name='ck_analyses_default_time_period'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id'),
    sa.UniqueConstraint('tenant_id', 'model_id', 'name', name='uq_analyses_tenant_model_name')
    )
    op.create_index('ix_analyses_index_id', 'analyses', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index(op.f('ix_analyses_is_deleted'), 'analyses', ['is_deleted'], unique=False)
    op.create_index('ix_analyses_tenant_active', 'analyses', ['tenant_id', 'is_deleted', 'index_id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index('ix_analyses_tenant_created_by', 'analyses', ['tenant_id', 'created_by_user_id'], unique=False)
    op.create_index(op.f('ix_analyses_tenant_id'), 'analyses', ['tenant_id'], unique=False)
    op.create_index('ix_analyses_tenant_id_lookup', 'analyses', ['tenant_id', 'id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index('ix_analyses_tenant_model', 'analyses', ['tenant_id', 'model_id'], unique=False)
    op.create_table('model_access_logs',
    sa.Column('model_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='The model that was accessed'),
    sa.Column('user_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='User who performed the access/operation'),
    sa.Column('access_type', sa.NVARCHAR(length=50), nullable=False, comment="Type of access ('read', 'write', 'execute', 'delete', 'permission_change', 'share', 'download', 'copy', 'template_create')"),
    sa.Column('access_result', sa.NVARCHAR(length=20), nullable=False, comment="Result of the access attempt ('success', 'denied', 'error', 'partial')"),
    sa.Column('permission_source', sa.NVARCHAR(length=50), nullable=True, comment="Source of permission ('direct', 'team', 'organization', 'admin')"),
    sa.Column('session_id', sa.NVARCHAR(length=255), nullable=True, comment='User session identifier'),
    sa.Column('ip_address', sa.NVARCHAR(length=45), nullable=True, comment='IP address of the request'),
    sa.Column('user_agent', sa.NVARCHAR(length=500), nullable=True, comment='User agent string from the request'),
    sa.Column('endpoint', sa.NVARCHAR(length=100), nullable=True, comment='API endpoint that was accessed'),
    sa.Column('request_method', sa.NVARCHAR(length=10), nullable=True, comment='HTTP method used for the request'),
    sa.Column('details', sa.NVARCHAR(), nullable=True, comment='Additional context information (JSON format)'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.CheckConstraint("access_result IN ('success', 'denied', 'error', 'partial')", name='ck_model_access_logs_access_result'),
    sa.CheckConstraint("access_type IN ('read', 'write', 'execute', 'delete', 'permission_change', 'share', 'download', 'copy', 'template_create')", name='ck_model_access_logs_access_type'),
    sa.CheckConstraint("permission_source IS NULL OR permission_source IN ('direct', 'team', 'organization', 'admin')", name='ck_model_access_logs_permission_source'),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id')
    )
    op.create_index('ix_model_access_logs_index_id', 'model_access_logs', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index('ix_model_access_logs_access_result', 'model_access_logs', ['access_result'], unique=False)
    op.create_index('ix_model_access_logs_access_type', 'model_access_logs', ['access_type'], unique=False)
    op.create_index(op.f('ix_model_access_logs_is_deleted'), 'model_access_logs', ['is_deleted'], unique=False)
    op.create_index('ix_model_access_logs_session', 'model_access_logs', ['session_id'], unique=False)
    op.create_index(op.f('ix_model_access_logs_tenant_id'), 'model_access_logs', ['tenant_id'], unique=False)
    op.create_index('ix_model_access_logs_tenant_model_time', 'model_access_logs', ['tenant_id', 'model_id', 'created_at'], unique=False)
    op.create_index('ix_model_access_logs_tenant_model_user', 'model_access_logs', ['tenant_id', 'model_id', 'user_id'], unique=False)
    op.create_index('ix_model_access_logs_tenant_user_time', 'model_access_logs', ['tenant_id', 'user_id', 'created_at'], unique=False)
    op.create_table('model_permissions',
    sa.Column('model_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='The model to which this permission applies'),
    sa.Column('user_id', mssql.UNIQUEIDENTIFIER(), nullable=True, comment='Target user for this permission (if applicable)'),
    sa.Column('organization_id', mssql.UNIQUEIDENTIFIER(), nullable=True, comment='Target organization for this permission (if applicable)'),
    sa.Column('team_id', mssql.UNIQUEIDENTIFIER(), nullable=True, comment='Target team for this permission (if applicable)'),
    sa.Column('permission_level', sa.NVARCHAR(length=20), nullable=False, comment="Access level ('read', 'write', 'execute', 'admin')"),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether the permission is currently active'),
    sa.Column('valid_from', sa.DateTime(), nullable=True, comment='When the permission becomes valid (optional)'),
    sa.Column('valid_until', sa.DateTime(), nullable=True, comment='When the permission expires (optional)'),
    sa.Column('granted_by_user_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='User who granted this permission'),
    sa.Column('granted_at', sa.DateTime(), nullable=False, comment='When the permission was granted'),
    sa.Column('revoked_by_user_id', mssql.UNIQUEIDENTIFIER(), nullable=True, comment='User who revoked the permission'),
    sa.Column('revoked_at', sa.DateTime(), nullable=True, comment='When the permission was revoked'),
    sa.Column('notes', sa.NVARCHAR(length=500), nullable=True, comment='Notes about this permission grant/revocation'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.CheckConstraint("permission_level IN ('read', 'write', 'execute', 'admin')", name='ck_model_permissions_level'),
    sa.CheckConstraint('\n            (user_id IS NOT NULL AND organization_id IS NULL AND team_id IS NULL) OR\n            (user_id IS NULL AND organization_id IS NOT NULL AND team_id IS NULL) OR\n            (user_id IS NULL AND organization_id IS NULL AND team_id IS NOT NULL)\n            ', name='ck_model_permissions_single_target'),
    sa.ForeignKeyConstraint(['granted_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['revoked_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id')
    )
    op.create_index('ix_model_permissions_index_id', 'model_permissions', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index(op.f('ix_model_permissions_is_deleted'), 'model_permissions', ['is_deleted'], unique=False)
    op.create_index('ix_model_permissions_tenant_active_status', 'model_permissions', ['tenant_id', 'index_id'], unique=False)
    op.create_index(op.f('ix_model_permissions_tenant_id'), 'model_permissions', ['tenant_id'], unique=False)
    op.create_index('ix_model_permissions_tenant_model', 'model_permissions', ['tenant_id', 'model_id', 'is_active'], unique=False)
    op.create_index('ix_model_permissions_tenant_organization', 'model_permissions', ['tenant_id', 'organization_id', 'model_id', 'is_active'], unique=False)
    op.create_index('ix_model_permissions_tenant_team', 'model_permissions', ['tenant_id', 'team_id', 'model_id', 'is_active'], unique=False)
    op.create_index('ix_model_permissions_tenant_user', 'model_permissions', ['tenant_id', 'user_id', 'model_id', 'is_active'], unique=False)
    op.create_index('ix_model_permissions_valid_until', 'model_permissions', ['valid_until'], unique=False)
    op.create_table('scenarios',
    sa.Column('name', sa.NVARCHAR(length=255), nullable=False, comment='Name of the scenario'),
    sa.Column('description', sa.NVARCHAR(), nullable=True, comment='Description of the scenario'),
    sa.Column('analysis_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Parent analysis this scenario belongs to'),
    sa.Column('reps', sa.Integer(), nullable=False, comment='Number of simulation replications for this scenario'),
    sa.Column('time_period', sa.NVARCHAR(length=50), nullable=False, comment='Time period for this scenario'),
    sa.Column('state', sa.NVARCHAR(length=50), nullable=False, comment='Execution state of the scenario'),
    sa.Column('current_rep', sa.Integer(), nullable=True, comment='Current replication number during execution'),
    sa.Column('total_reps', sa.Integer(), nullable=True, comment='Total replications to run (matches reps)'),
    sa.Column('progress_percentage', sa.DECIMAL(precision=5, scale=2), nullable=True, comment='Execution progress (0.00 to 100.00)'),
    sa.Column('started_at', sa.DateTime(), nullable=True, comment='Timestamp when execution started'),
    sa.Column('completed_at', sa.DateTime(), nullable=True, comment='Timestamp when execution completed'),
    sa.Column('execution_time_ms', sa.BigInteger(), nullable=True, comment='Total execution time in milliseconds'),
    sa.Column('error_message', sa.NVARCHAR(), nullable=True, comment='User-friendly error message if execution failed'),
    sa.Column('error_details', sa.NVARCHAR(), nullable=True, comment='Technical error details if execution failed'),
    sa.Column('error_stack_trace', sa.NVARCHAR(), nullable=True, comment='Full stack trace for debugging if execution failed'),
    sa.Column('blob_storage_path', sa.NVARCHAR(length=500), nullable=True, comment='Path to detailed results in Azure Blob Storage'),
    sa.Column('created_by_user_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='User who created the scenario'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.CheckConstraint("state IN ('not_ready_to_run', 'ready_to_run', 'is_running', 'cancelling', 'ran_success', 'ran_with_errors')", name='ck_scenarios_state'),
    sa.CheckConstraint("time_period IN ('hourly', 'daily', 'monthly')", name='ck_scenarios_time_period'),
    sa.ForeignKeyConstraint(['analysis_id'], ['analyses.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id'),
    sa.UniqueConstraint('tenant_id', 'analysis_id', 'name', name='uq_scenarios_tenant_analysis_name')
    )
    op.create_index('ix_scenarios_index_id', 'scenarios', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index(op.f('ix_scenarios_is_deleted'), 'scenarios', ['is_deleted'], unique=False)
    op.create_index('ix_scenarios_tenant_active', 'scenarios', ['tenant_id', 'is_deleted', 'index_id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index('ix_scenarios_tenant_analysis', 'scenarios', ['tenant_id', 'analysis_id'], unique=False)
    op.create_index('ix_scenarios_tenant_created_by', 'scenarios', ['tenant_id', 'created_by_user_id'], unique=False)
    op.create_index(op.f('ix_scenarios_tenant_id'), 'scenarios', ['tenant_id'], unique=False)
    op.create_index('ix_scenarios_tenant_id_lookup', 'scenarios', ['tenant_id', 'id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index('ix_scenarios_tenant_state', 'scenarios', ['tenant_id', 'state'], unique=False)
    op.create_table('scenario_item_profiles',
    sa.Column('scenario_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Parent scenario this profile belongs to'),
    sa.Column('target_object_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='ID of the model component being overridden'),
    sa.Column('target_object_type', sa.NVARCHAR(length=50), nullable=False, comment='Type of model component (activity, resource, etc.)'),
    sa.Column('property_name', sa.NVARCHAR(length=255), nullable=False, comment='Name of the property being overridden'),
    sa.Column('property_value', sa.NVARCHAR(), nullable=False, comment='New value for the property'),
    sa.Column('original_value', sa.NVARCHAR(), nullable=True, comment='Original value from the base model (for reference)'),
    sa.Column('description', sa.NVARCHAR(), nullable=True, comment='Description of why this override was made'),
    sa.Column('change_reason', sa.NVARCHAR(length=500), nullable=True, comment='Reason for the parameter change'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.CheckConstraint("target_object_type IN ('activity', 'resource', 'queue', 'connector', 'resource_pool')", name='ck_scenario_item_profiles_target_type'),
    sa.ForeignKeyConstraint(['scenario_id'], ['scenarios.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id'),
    sa.UniqueConstraint('tenant_id', 'scenario_id', 'target_object_id', 'property_name', name='uq_scenprofiles_tenant_scenario_target_prop')
    )
    op.create_index('ix_scenario_item_profiles_index_id', 'scenario_item_profiles', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index(op.f('ix_scenario_item_profiles_is_deleted'), 'scenario_item_profiles', ['is_deleted'], unique=False)
    op.create_index('ix_scenario_item_profiles_tenant_active', 'scenario_item_profiles', ['tenant_id', 'is_deleted', 'index_id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index(op.f('ix_scenario_item_profiles_tenant_id'), 'scenario_item_profiles', ['tenant_id'], unique=False)
    op.create_index('ix_scenario_item_profiles_tenant_id_lookup', 'scenario_item_profiles', ['tenant_id', 'id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index('ix_scenario_item_profiles_tenant_scenario', 'scenario_item_profiles', ['tenant_id', 'scenario_id'], unique=False)
    op.create_index('ix_scenario_item_profiles_tenant_target', 'scenario_item_profiles', ['tenant_id', 'target_object_id', 'target_object_type'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_scenario_item_profiles_tenant_target', table_name='scenario_item_profiles')
    op.drop_index('ix_scenario_item_profiles_tenant_scenario', table_name='scenario_item_profiles')
    op.drop_index('ix_scenario_item_profiles_tenant_id_lookup', table_name='scenario_item_profiles', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_scenario_item_profiles_tenant_id'), table_name='scenario_item_profiles')
    op.drop_index('ix_scenario_item_profiles_tenant_active', table_name='scenario_item_profiles', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_scenario_item_profiles_is_deleted'), table_name='scenario_item_profiles')
    op.drop_index('ix_scenario_item_profiles_index_id', table_name='scenario_item_profiles', mssql_clustered=True)
    op.drop_table('scenario_item_profiles')
    op.drop_index('ix_scenarios_tenant_state', table_name='scenarios')
    op.drop_index('ix_scenarios_tenant_id_lookup', table_name='scenarios', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_scenarios_tenant_id'), table_name='scenarios')
    op.drop_index('ix_scenarios_tenant_created_by', table_name='scenarios')
    op.drop_index('ix_scenarios_tenant_analysis', table_name='scenarios')
    op.drop_index('ix_scenarios_tenant_active', table_name='scenarios', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_scenarios_is_deleted'), table_name='scenarios')
    op.drop_index('ix_scenarios_index_id', table_name='scenarios', mssql_clustered=True)
    op.drop_table('scenarios')
    op.drop_index('ix_model_permissions_valid_until', table_name='model_permissions')
    op.drop_index('ix_model_permissions_tenant_user', table_name='model_permissions')
    op.drop_index('ix_model_permissions_tenant_team', table_name='model_permissions')
    op.drop_index('ix_model_permissions_tenant_organization', table_name='model_permissions')
    op.drop_index('ix_model_permissions_tenant_model', table_name='model_permissions')
    op.drop_index(op.f('ix_model_permissions_tenant_id'), table_name='model_permissions')
    op.drop_index('ix_model_permissions_tenant_active_status', table_name='model_permissions')
    op.drop_index(op.f('ix_model_permissions_is_deleted'), table_name='model_permissions')
    op.drop_index('ix_model_permissions_index_id', table_name='model_permissions', mssql_clustered=True)
    op.drop_table('model_permissions')
    op.drop_index('ix_model_access_logs_tenant_user_time', table_name='model_access_logs')
    op.drop_index('ix_model_access_logs_tenant_model_user', table_name='model_access_logs')
    op.drop_index('ix_model_access_logs_tenant_model_time', table_name='model_access_logs')
    op.drop_index(op.f('ix_model_access_logs_tenant_id'), table_name='model_access_logs')
    op.drop_index('ix_model_access_logs_session', table_name='model_access_logs')
    op.drop_index(op.f('ix_model_access_logs_is_deleted'), table_name='model_access_logs')
    op.drop_index('ix_model_access_logs_access_type', table_name='model_access_logs')
    op.drop_index('ix_model_access_logs_access_result', table_name='model_access_logs')
    op.drop_index('ix_model_access_logs_index_id', table_name='model_access_logs', mssql_clustered=True)
    op.drop_table('model_access_logs')
    op.drop_index('ix_analyses_tenant_model', table_name='analyses')
    op.drop_index('ix_analyses_tenant_id_lookup', table_name='analyses', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_analyses_tenant_id'), table_name='analyses')
    op.drop_index('ix_analyses_tenant_created_by', table_name='analyses')
    op.drop_index('ix_analyses_tenant_active', table_name='analyses', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_analyses_is_deleted'), table_name='analyses')
    op.drop_index('ix_analyses_index_id', table_name='analyses', mssql_clustered=True)
    op.drop_table('analyses')
    op.drop_index(op.f('ix_user_sessions_user_id'), table_name='user_sessions')
    op.drop_index('ix_user_sessions_tenant_id_lookup', table_name='user_sessions', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_user_sessions_tenant_id'), table_name='user_sessions')
    op.drop_index('ix_user_sessions_tenant_active', table_name='user_sessions', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_user_sessions_is_deleted'), table_name='user_sessions')
    op.drop_index('ix_user_sessions_index_id', table_name='user_sessions', mssql_clustered=True)
    op.drop_table('user_sessions')
    op.drop_index(op.f('ix_organization_memberships_user_id'), table_name='organization_memberships')
    op.drop_index('ix_organization_memberships_user_active', table_name='organization_memberships', mssql_where=sa.text("is_deleted = 0 AND status = 'active'"))
    op.drop_index('ix_organization_memberships_tenant_id_lookup', table_name='organization_memberships', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_organization_memberships_tenant_id'), table_name='organization_memberships')
    op.drop_index('ix_organization_memberships_tenant_active', table_name='organization_memberships', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index('ix_organization_memberships_role_lookup', table_name='organization_memberships', mssql_where=sa.text("is_deleted = 0 AND status = 'active'"))
    op.drop_index(op.f('ix_organization_memberships_organization_id'), table_name='organization_memberships')
    op.drop_index('ix_organization_memberships_org_active', table_name='organization_memberships', mssql_where=sa.text("is_deleted = 0 AND status = 'active'"))
    op.drop_index(op.f('ix_organization_memberships_is_deleted'), table_name='organization_memberships')
    op.drop_index('ix_organization_memberships_invitations', table_name='organization_memberships', mssql_where=sa.text("is_deleted = 0 AND status = 'invited'"))
    op.drop_index('ix_organization_memberships_index_id', table_name='organization_memberships', mssql_clustered=True)
    op.drop_table('organization_memberships')
    op.drop_index('ix_models_tenant_team', table_name='models')
    op.drop_index('ix_models_tenant_source', table_name='models')
    op.drop_index('ix_models_tenant_organization', table_name='models')
    op.drop_index('ix_models_tenant_name', table_name='models')
    op.drop_index(op.f('ix_models_tenant_id'), table_name='models')
    op.drop_index('ix_models_tenant_created_by_user', table_name='models')
    op.drop_index('ix_models_is_template', table_name='models')
    op.drop_index('ix_models_is_public', table_name='models')
    op.drop_index(op.f('ix_models_is_deleted'), table_name='models')
    op.drop_index('ix_models_index_id', table_name='models', mssql_clustered=True)
    op.drop_table('models')
    op.drop_index('ix_users_tenant_id_lookup', table_name='users', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_users_tenant_id'), table_name='users')
    op.drop_index('ix_users_tenant_active', table_name='users', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_users_is_deleted'), table_name='users')
    op.drop_index('ix_users_index_id', table_name='users', mssql_clustered=True)
    op.drop_table('users')
    op.drop_index(op.f('ix_tenants_tenant_id'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_is_deleted'), table_name='tenants')
    op.drop_index('ix_tenants_index_id', table_name='tenants', mssql_clustered=True)
    op.drop_table('tenants')
    op.drop_index('ix_teams_tenant_id_lookup', table_name='teams', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_teams_tenant_id'), table_name='teams')
    op.drop_index('ix_teams_tenant_active', table_name='teams', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_teams_is_deleted'), table_name='teams')
    op.drop_index('ix_teams_index_id', table_name='teams', mssql_clustered=True)
    op.drop_table('teams')
    op.drop_index('ix_organizations_tenant_name', table_name='organizations', mssql_where='is_deleted = 0')
    op.drop_index('ix_organizations_tenant_id_lookup', table_name='organizations', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_organizations_tenant_id'), table_name='organizations')
    op.drop_index('ix_organizations_tenant_domain', table_name='organizations', mssql_where='domain IS NOT NULL AND is_deleted = 0')
    op.drop_index('ix_organizations_tenant_active', table_name='organizations', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index('ix_organizations_stripe_customer_id', table_name='organizations', mssql_where='stripe_customer_id IS NOT NULL')
    op.drop_index(op.f('ix_organizations_is_deleted'), table_name='organizations')
    op.drop_index('ix_organizations_index_id', table_name='organizations', mssql_clustered=True)
    op.drop_table('organizations')
    # ### end Alembic commands ###

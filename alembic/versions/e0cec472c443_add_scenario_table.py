"""Add Scenario table

Revision ID: e0cec472c443
Revises: ddf3c8fc96cb
Create Date: 2025-06-02 23:20:00.735941

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mssql

# revision identifiers, used by Alembic.
revision: str = 'e0cec472c443'
down_revision: Union[str, None] = 'ddf3c8fc96cb'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('scenarios',
    sa.Column('name', sa.NVARCHAR(length=255), nullable=False, comment='Name of the scenario'),
    sa.Column('description', sa.NVARCHAR(), nullable=True, comment='Description of the scenario'),
    sa.Column('analysis_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Parent analysis this scenario belongs to'),
    sa.Column('reps', sa.Integer(), nullable=False, comment='Number of simulation replications for this scenario'),
    sa.Column('time_period', sa.NVARCHAR(length=50), nullable=False, comment='Time period for this scenario'),
    sa.Column('state', sa.NVARCHAR(length=50), nullable=False, comment='Execution state of the scenario'),
    sa.Column('current_rep', sa.Integer(), nullable=True, comment='Current replication number during execution'),
    sa.Column('total_reps', sa.Integer(), nullable=True, comment='Total replications to run (matches reps)'),
    sa.Column('progress_percentage', sa.DECIMAL(precision=5, scale=2), nullable=True, comment='Execution progress (0.00 to 100.00)'),
    sa.Column('started_at', sa.DateTime(), nullable=True, comment='Timestamp when execution started'),
    sa.Column('completed_at', sa.DateTime(), nullable=True, comment='Timestamp when execution completed'),
    sa.Column('execution_time_ms', sa.BigInteger(), nullable=True, comment='Total execution time in milliseconds'),
    sa.Column('error_message', sa.NVARCHAR(), nullable=True, comment='User-friendly error message if execution failed'),
    sa.Column('error_details', sa.NVARCHAR(), nullable=True, comment='Technical error details if execution failed'),
    sa.Column('error_stack_trace', sa.NVARCHAR(), nullable=True, comment='Full stack trace for debugging if execution failed'),
    sa.Column('blob_storage_path', sa.NVARCHAR(length=500), nullable=True, comment='Path to detailed results in Azure Blob Storage'),
    sa.Column('created_by_user_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='User who created the scenario'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.CheckConstraint("state IN ('not_ready_to_run', 'ready_to_run', 'is_running', 'cancelling', 'ran_success', 'ran_with_errors')", name='ck_scenarios_state'),
    sa.CheckConstraint("time_period IN ('hourly', 'daily', 'monthly')", name='ck_scenarios_time_period'),
    sa.ForeignKeyConstraint(['analysis_id'], ['analyses.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id'),
    sa.UniqueConstraint('tenant_id', 'analysis_id', 'name', name='uq_scenarios_tenant_analysis_name')
    )
    op.create_index('ix_scenarios_index_id', 'scenarios', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index(op.f('ix_scenarios_is_deleted'), 'scenarios', ['is_deleted'], unique=False)
    op.create_index('ix_scenarios_tenant_active', 'scenarios', ['tenant_id', 'is_deleted', 'index_id'], unique=False)
    op.create_index('ix_scenarios_tenant_analysis', 'scenarios', ['tenant_id', 'analysis_id'], unique=False)
    op.create_index('ix_scenarios_tenant_created_by', 'scenarios', ['tenant_id', 'created_by_user_id'], unique=False)
    op.create_index(op.f('ix_scenarios_tenant_id'), 'scenarios', ['tenant_id'], unique=False)
    op.create_index('ix_scenarios_tenant_id_lookup', 'scenarios', ['tenant_id', 'id'], unique=False)
    op.create_index('ix_scenarios_tenant_state', 'scenarios', ['tenant_id', 'state'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_scenarios_tenant_state', table_name='scenarios')
    op.drop_index('ix_scenarios_tenant_id_lookup', table_name='scenarios')
    op.drop_index(op.f('ix_scenarios_tenant_id'), table_name='scenarios')
    op.drop_index('ix_scenarios_tenant_created_by', table_name='scenarios')
    op.drop_index('ix_scenarios_tenant_analysis', table_name='scenarios')
    op.drop_index('ix_scenarios_tenant_active', table_name='scenarios')
    op.drop_index(op.f('ix_scenarios_is_deleted'), table_name='scenarios')
    op.drop_index('ix_scenarios_index_id', table_name='scenarios', mssql_clustered=True)
    op.drop_table('scenarios')
    # ### end Alembic commands ###

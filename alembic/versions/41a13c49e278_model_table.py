"""Model table

Revision ID: 41a13c49e278
Revises: dcc88c19df3a
Create Date: 2025-06-02 20:03:09.122558

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mssql

# revision identifiers, used by Alembic.
revision: str = '41a13c49e278'
down_revision: Union[str, None] = 'dcc88c19df3a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('models',
    sa.Column('name', sa.NVARCHAR(length=255), nullable=False),
    sa.Column('description', sa.NVARCHAR(), nullable=True),
    sa.Column('source', sa.NVARCHAR(length=50), nullable=False),
    sa.Column('source_document_id', sa.NVARCHAR(length=255), nullable=True),
    sa.Column('source_url', sa.NVARCHAR(length=500), nullable=True),
    sa.Column('reps', sa.Integer(), nullable=False, default=1),
    sa.Column('forecast_days', sa.Integer(), nullable=False, default=30),
    sa.Column('random_seed', sa.Integer(), nullable=True),
    sa.Column('time_type', sa.NVARCHAR(length=20), nullable=False, default='clock'),
    sa.Column('one_clock_unit', sa.NVARCHAR(length=20), nullable=True),
    sa.Column('warmup_clock_period', sa.DECIMAL(precision=18, scale=6), nullable=True),
    sa.Column('run_clock_period', sa.DECIMAL(precision=18, scale=6), nullable=True),
    sa.Column('warmup_date_time', sa.DateTime(), nullable=True),
    sa.Column('start_date_time', sa.DateTime(), nullable=True),
    sa.Column('finish_date_time', sa.DateTime(), nullable=True),
    sa.Column('created_by_user_id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('organization_id', mssql.UNIQUEIDENTIFIER(), nullable=True),
    sa.Column('team_id', mssql.UNIQUEIDENTIFIER(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=False, default=False),
    sa.Column('is_template', sa.Boolean(), nullable=False, default=False),
    sa.Column('version', sa.Integer(), nullable=False, default=1),
    sa.Column('blob_storage_url', sa.NVARCHAR(length=500), nullable=True),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.CheckConstraint("one_clock_unit IS NULL OR one_clock_unit IN ('seconds', 'minutes', 'hours', 'days')", name='ck_models_one_clock_unit'),
    sa.CheckConstraint("source IN ('lucidchart', 'standalone', 'miro')", name='ck_models_source'),
    sa.CheckConstraint("time_type IN ('clock', 'calendar')", name='ck_models_time_type'),
    sa.CheckConstraint('forecast_days >= 1', name='ck_models_forecast_days_positive'),
    sa.CheckConstraint('reps >= 1', name='ck_models_reps_positive'),
    sa.CheckConstraint('version >= 1', name='ck_models_version_positive'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id'),
    sa.UniqueConstraint('tenant_id', 'name', name='uq_models_tenant_name')
    )
    op.create_index('ix_models_index_id', 'models', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index(op.f('ix_models_is_deleted'), 'models', ['is_deleted'], unique=False)
    op.create_index('ix_models_is_public', 'models', ['is_public'], unique=False)
    op.create_index('ix_models_is_template', 'models', ['is_template'], unique=False)
    op.create_index('ix_models_tenant_created_by_user', 'models', ['tenant_id', 'created_by_user_id'], unique=False)
    op.create_index(op.f('ix_models_tenant_id'), 'models', ['tenant_id'], unique=False)
    op.create_index('ix_models_tenant_name', 'models', ['tenant_id', 'name'], unique=False)
    op.create_index('ix_models_tenant_organization', 'models', ['tenant_id', 'organization_id'], unique=False)
    op.create_index('ix_models_tenant_source', 'models', ['tenant_id', 'source'], unique=False)
    op.create_index('ix_models_tenant_team', 'models', ['tenant_id', 'team_id'], unique=False)
    op.create_index('ix_models_tenant_active', 'models', ['tenant_id', 'is_deleted', 'index_id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index('ix_models_tenant_id_lookup', 'models', ['tenant_id', 'id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_models_tenant_id_lookup', table_name='models', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index('ix_models_tenant_active', table_name='models', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index('ix_models_tenant_team', table_name='models')
    op.drop_index('ix_models_tenant_source', table_name='models')
    op.drop_index('ix_models_tenant_organization', table_name='models')
    op.drop_index('ix_models_tenant_name', table_name='models')
    op.drop_index(op.f('ix_models_tenant_id'), table_name='models')
    op.drop_index('ix_models_tenant_created_by_user', table_name='models')
    op.drop_index('ix_models_is_template', table_name='models')
    op.drop_index('ix_models_is_public', table_name='models')
    op.drop_index(op.f('ix_models_is_deleted'), table_name='models')
    op.drop_index('ix_models_index_id', table_name='models', mssql_clustered=True)
    op.drop_table('models')
    # ### end Alembic commands ###

"""Initial

Revision ID: dcc88c19df3a
Revises: 
Create Date: 2025-06-02 18:07:54.362657

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mssql

# revision identifiers, used by Alembic.
revision: str = 'dcc88c19df3a'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('organizations',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Organization name'),
    sa.Column('domain', sa.String(length=255), nullable=True, comment='Primary email domain for the organization'),
    sa.Column('billing_email', sa.String(length=255), nullable=True, comment='Billing contact email address'),
    sa.Column('billing_address', sa.NVARCHAR(), nullable=True, comment='Billing address details'),
    sa.Column('stripe_customer_id', sa.String(length=255), nullable=True, comment='Stripe customer identifier for billing'),
    sa.Column('metadata', sa.NVARCHAR(), nullable=True, comment='Additional organization information (JSON data)'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.CheckConstraint("domain IS NULL OR domain LIKE '%.%'", name='ck_organizations_domain_format'),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id')
    )
    op.create_index('ix_organizations_index_id', 'organizations', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index(op.f('ix_organizations_is_deleted'), 'organizations', ['is_deleted'], unique=False)
    op.create_index('ix_organizations_stripe_customer_id', 'organizations', ['stripe_customer_id'], unique=False, mssql_where='stripe_customer_id IS NOT NULL')
    op.create_index('ix_organizations_tenant_active', 'organizations', ['tenant_id', 'is_deleted', 'index_id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index('ix_organizations_tenant_domain', 'organizations', ['tenant_id', 'domain'], unique=False, mssql_where='domain IS NOT NULL AND is_deleted = 0')
    op.create_index(op.f('ix_organizations_tenant_id'), 'organizations', ['tenant_id'], unique=False)
    op.create_index('ix_organizations_tenant_id_lookup', 'organizations', ['tenant_id', 'id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index('ix_organizations_tenant_name', 'organizations', ['tenant_id', 'name'], unique=True, mssql_where='is_deleted = 0')
    op.create_table('teams',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Team name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Team description'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id')
    )
    op.create_index('ix_teams_index_id', 'teams', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index(op.f('ix_teams_is_deleted'), 'teams', ['is_deleted'], unique=False)
    op.create_index('ix_teams_tenant_active', 'teams', ['tenant_id', 'is_deleted', 'index_id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index(op.f('ix_teams_tenant_id'), 'teams', ['tenant_id'], unique=False)
    op.create_index('ix_teams_tenant_id_lookup', 'teams', ['tenant_id', 'id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_table('tenants',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Display name of the tenant organization'),
    sa.Column('subdomain', sa.String(length=100), nullable=False, comment="Unique subdomain for tenant (e.g., 'acme' in acme.quodsi.com)"),
    sa.Column('slug', sa.String(length=100), nullable=False, comment="URL-friendly identifier for tenant (e.g., 'acme-corp')"),
    sa.Column('plan_type', sa.String(length=50), nullable=False, comment='Subscription plan: trial, starter, professional, enterprise'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Tenant status: trial, active, suspended, cancelled, deleted'),
    sa.Column('max_users', sa.Integer(), nullable=False, comment='Maximum number of users allowed'),
    sa.Column('max_models', sa.Integer(), nullable=False, comment='Maximum number of models allowed'),
    sa.Column('max_scenarios_per_month', sa.Integer(), nullable=False, comment='Maximum scenarios that can be run per month'),
    sa.Column('max_storage_gb', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='Maximum storage allowed in GB'),
    sa.Column('trial_expires_at', sa.DateTime(), nullable=True, comment='When trial period expires (null for paid plans)'),
    sa.Column('activated_at', sa.DateTime(), nullable=True, comment='When tenant was activated (upgraded from trial)'),
    sa.Column('stripe_customer_id', sa.String(length=255), nullable=True, comment='Stripe customer ID for billing integration'),
    sa.Column('billing_email', sa.String(length=255), nullable=True, comment='Primary email for billing communications'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=True, comment='Nullable for tenants table'),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id'),
    sa.UniqueConstraint('slug', name='uq_tenants_slug'),
    sa.UniqueConstraint('subdomain', name='uq_tenants_subdomain')
    )
    op.create_index('ix_tenants_index_id', 'tenants', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index('ix_tenants_active', 'tenants', ['is_deleted'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index(op.f('ix_tenants_is_deleted'), 'tenants', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_tenants_tenant_id'), 'tenants', ['tenant_id'], unique=False)
    op.create_table('users',
    sa.Column('identity_provider', sa.String(length=50), nullable=False, comment="Provider type ('entra_id', 'google', etc.)"),
    sa.Column('identity_provider_id', sa.String(length=255), nullable=False, comment='Unique identifier from the provider'),
    sa.Column('email', sa.String(length=255), nullable=False, comment="User's email address"),
    sa.Column('display_name', sa.String(length=255), nullable=False, comment="User's display name"),
    sa.Column('last_login_at', sa.DateTime(), nullable=True, comment='Most recent login timestamp'),
    sa.Column('login_count', sa.Integer(), nullable=False, comment='Count of user logins'),
    sa.Column('total_usage_minutes', sa.Integer(), nullable=False, comment='Cumulative time spent using Quodsi'),
    sa.Column('last_session_start', sa.DateTime(), nullable=True, comment='When current/last session started'),
    sa.Column('last_active_at', sa.DateTime(), nullable=True, comment='Last user activity timestamp'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='User status (active, invited, suspended)'),
    sa.Column('user_metadata', sa.String(length=4000), nullable=True, comment='Additional profile information (JSON data)'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='fk_users_tenant_id'),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('identity_provider', 'identity_provider_id', name='uq_users_identity_provider'),
    sa.UniqueConstraint('index_id'),
    sa.UniqueConstraint('tenant_id', 'email', name='uq_users_tenant_email')
    )
    op.create_index('ix_users_index_id', 'users', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index(op.f('ix_users_is_deleted'), 'users', ['is_deleted'], unique=False)
    op.create_index('ix_users_tenant_active', 'users', ['tenant_id', 'is_deleted', 'index_id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index(op.f('ix_users_tenant_id'), 'users', ['tenant_id'], unique=False)
    op.create_index('ix_users_tenant_id_lookup', 'users', ['tenant_id', 'id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_table('organization_memberships',
    sa.Column('organization_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Organization this membership belongs to'),
    sa.Column('user_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='User who is a member of the organization'),
    sa.Column('role', sa.String(length=50), nullable=False, comment='User role: owner, admin, member, viewer'),
    sa.Column('invited_by_user_id', mssql.UNIQUEIDENTIFIER(), nullable=True, comment='User who invited this member'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Membership status: active, invited, suspended, left'),
    sa.Column('last_active_at', sa.DateTime(), nullable=True, comment='When the user was last active in this organization'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.CheckConstraint("role IN ('owner', 'admin', 'member', 'viewer')", name='ck_organization_memberships_role'),
    sa.CheckConstraint("status IN ('active', 'invited', 'suspended', 'left')", name='ck_organization_memberships_status'),
    sa.ForeignKeyConstraint(['invited_by_user_id'], ['users.id'], name='fk_organization_memberships_invited_by'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='fk_organization_memberships_organization'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_organization_memberships_user'),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id'),
    sa.UniqueConstraint('tenant_id', 'organization_id', 'user_id', name='uq_organization_memberships_tenant_org_user')
    )
    op.create_index('ix_organization_memberships_index_id', 'organization_memberships', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index('ix_organization_memberships_invitations', 'organization_memberships', ['tenant_id', 'status', 'created_at'], unique=False, mssql_where=sa.text("is_deleted = 0 AND status = 'invited'"))
    op.create_index(op.f('ix_organization_memberships_is_deleted'), 'organization_memberships', ['is_deleted'], unique=False)
    op.create_index('ix_organization_memberships_org_active', 'organization_memberships', ['tenant_id', 'organization_id', 'status'], unique=False, mssql_where=sa.text("is_deleted = 0 AND status = 'active'"))
    op.create_index(op.f('ix_organization_memberships_organization_id'), 'organization_memberships', ['organization_id'], unique=False)
    op.create_index('ix_organization_memberships_role_lookup', 'organization_memberships', ['tenant_id', 'organization_id', 'role'], unique=False, mssql_where=sa.text("is_deleted = 0 AND status = 'active'"))
    op.create_index('ix_organization_memberships_tenant_active', 'organization_memberships', ['tenant_id', 'is_deleted', 'index_id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index(op.f('ix_organization_memberships_tenant_id'), 'organization_memberships', ['tenant_id'], unique=False)
    op.create_index('ix_organization_memberships_tenant_id_lookup', 'organization_memberships', ['tenant_id', 'id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index('ix_organization_memberships_user_active', 'organization_memberships', ['tenant_id', 'user_id', 'status'], unique=False, mssql_where=sa.text("is_deleted = 0 AND status = 'active'"))
    op.create_index(op.f('ix_organization_memberships_user_id'), 'organization_memberships', ['user_id'], unique=False)
    op.create_table('user_sessions',
    sa.Column('user_id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('ended_at', sa.DateTime(), nullable=True),
    sa.Column('duration_minutes', sa.Integer(), nullable=True),
    sa.Column('session_type', sa.String(length=50), nullable=False),
    sa.Column('client_type', sa.String(length=100), nullable=False),
    sa.Column('client_info', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id')
    )
    op.create_index('ix_user_sessions_index_id', 'user_sessions', ['index_id'], unique=True, mssql_clustered=True)
    op.create_index(op.f('ix_user_sessions_is_deleted'), 'user_sessions', ['is_deleted'], unique=False)
    op.create_index('ix_user_sessions_tenant_active', 'user_sessions', ['tenant_id', 'is_deleted', 'index_id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index(op.f('ix_user_sessions_tenant_id'), 'user_sessions', ['tenant_id'], unique=False)
    op.create_index('ix_user_sessions_tenant_id_lookup', 'user_sessions', ['tenant_id', 'id'], unique=False, mssql_where=sa.text('is_deleted = 0'))
    op.create_index(op.f('ix_user_sessions_user_id'), 'user_sessions', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_sessions_user_id'), table_name='user_sessions')
    op.drop_index('ix_user_sessions_tenant_id_lookup', table_name='user_sessions', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_user_sessions_tenant_id'), table_name='user_sessions')
    op.drop_index('ix_user_sessions_tenant_active', table_name='user_sessions', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_user_sessions_is_deleted'), table_name='user_sessions')
    op.drop_index('ix_user_sessions_index_id', table_name='user_sessions', mssql_clustered=True)
    op.drop_table('user_sessions')
    op.drop_index(op.f('ix_organization_memberships_user_id'), table_name='organization_memberships')
    op.drop_index('ix_organization_memberships_user_active', table_name='organization_memberships', mssql_where=sa.text("is_deleted = 0 AND status = 'active'"))
    op.drop_index('ix_organization_memberships_tenant_id_lookup', table_name='organization_memberships', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_organization_memberships_tenant_id'), table_name='organization_memberships')
    op.drop_index('ix_organization_memberships_tenant_active', table_name='organization_memberships', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index('ix_organization_memberships_role_lookup', table_name='organization_memberships', mssql_where=sa.text("is_deleted = 0 AND status = 'active'"))
    op.drop_index(op.f('ix_organization_memberships_organization_id'), table_name='organization_memberships')
    op.drop_index('ix_organization_memberships_org_active', table_name='organization_memberships', mssql_where=sa.text("is_deleted = 0 AND status = 'active'"))
    op.drop_index(op.f('ix_organization_memberships_is_deleted'), table_name='organization_memberships')
    op.drop_index('ix_organization_memberships_invitations', table_name='organization_memberships', mssql_where=sa.text("is_deleted = 0 AND status = 'invited'"))
    op.drop_index('ix_organization_memberships_index_id', table_name='organization_memberships', mssql_clustered=True)
    op.drop_table('organization_memberships')
    op.drop_index('ix_users_tenant_id_lookup', table_name='users', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_users_tenant_id'), table_name='users')
    op.drop_index('ix_users_tenant_active', table_name='users', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_users_is_deleted'), table_name='users')
    op.drop_index('ix_users_index_id', table_name='users', mssql_clustered=True)
    op.drop_table('users')
    op.drop_index(op.f('ix_tenants_tenant_id'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_is_deleted'), table_name='tenants')
    op.drop_index('ix_tenants_active', table_name='tenants', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index('ix_tenants_index_id', table_name='tenants', mssql_clustered=True)
    op.drop_table('tenants')
    op.drop_index('ix_teams_tenant_id_lookup', table_name='teams', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_teams_tenant_id'), table_name='teams')
    op.drop_index('ix_teams_tenant_active', table_name='teams', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_teams_is_deleted'), table_name='teams')
    op.drop_index('ix_teams_index_id', table_name='teams', mssql_clustered=True)
    op.drop_table('teams')
    op.drop_index('ix_organizations_tenant_name', table_name='organizations', mssql_where='is_deleted = 0')
    op.drop_index('ix_organizations_tenant_id_lookup', table_name='organizations', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index(op.f('ix_organizations_tenant_id'), table_name='organizations')
    op.drop_index('ix_organizations_tenant_domain', table_name='organizations', mssql_where='domain IS NOT NULL AND is_deleted = 0')
    op.drop_index('ix_organizations_tenant_active', table_name='organizations', mssql_where=sa.text('is_deleted = 0'))
    op.drop_index('ix_organizations_stripe_customer_id', table_name='organizations', mssql_where='stripe_customer_id IS NOT NULL')
    op.drop_index(op.f('ix_organizations_is_deleted'), table_name='organizations')
    op.drop_index('ix_organizations_index_id', table_name='organizations', mssql_clustered=True)
    op.drop_table('organizations')
    # ### end Alembic commands ###

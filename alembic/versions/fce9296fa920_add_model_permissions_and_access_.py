"""Add model permissions and access logging system

Revision ID: fce9296fa920
Revises: 41a13c49e278
Create Date: 2025-06-02 21:22:04.994951

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mssql

# revision identifiers, used by Alembic.
revision: str = 'fce9296fa920'
down_revision: Union[str, None] = '41a13c49e278'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('model_access_logs',
    sa.Column('model_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='The model that was accessed'),
    sa.Column('user_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='User who performed the access/operation'),
    sa.Column('access_type', sa.NVARCHAR(length=50), nullable=False, comment="Type of access ('read', 'write', 'execute', 'delete', 'permission_change', 'share', 'download', 'copy', 'template_create')"),
    sa.Column('access_result', sa.NVARCHAR(length=20), nullable=False, comment="Result of the access attempt ('success', 'denied', 'error', 'partial')"),
    sa.Column('permission_source', sa.NVARCHAR(length=50), nullable=True, comment="Source of permission ('direct', 'team', 'organization', 'admin')"),
    sa.Column('session_id', sa.NVARCHAR(length=255), nullable=True, comment='User session identifier'),
    sa.Column('ip_address', sa.NVARCHAR(length=45), nullable=True, comment='IP address of the request'),
    sa.Column('user_agent', sa.NVARCHAR(length=500), nullable=True, comment='User agent string from the request'),
    sa.Column('endpoint', sa.NVARCHAR(length=100), nullable=True, comment='API endpoint that was accessed'),
    sa.Column('request_method', sa.NVARCHAR(length=10), nullable=True, comment='HTTP method used for the request'),
    sa.Column('details', sa.NVARCHAR(), nullable=True, comment='Additional context information (JSON format)'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.CheckConstraint("access_result IN ('success', 'denied', 'error', 'partial')", name='ck_model_access_logs_access_result'),
    sa.CheckConstraint("access_type IN ('read', 'write', 'execute', 'delete', 'permission_change', 'share', 'download', 'copy', 'template_create')", name='ck_model_access_logs_access_type'),
    sa.CheckConstraint("permission_source IS NULL OR permission_source IN ('direct', 'team', 'organization', 'admin')", name='ck_model_access_logs_permission_source'),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id')
    )
    op.create_index('ix_model_access_logs_access_result', 'model_access_logs', ['access_result'], unique=False)
    op.create_index('ix_model_access_logs_access_type', 'model_access_logs', ['access_type'], unique=False)
    op.create_index(op.f('ix_model_access_logs_is_deleted'), 'model_access_logs', ['is_deleted'], unique=False)
    op.create_index('ix_model_access_logs_session', 'model_access_logs', ['session_id'], unique=False)
    op.create_index(op.f('ix_model_access_logs_tenant_id'), 'model_access_logs', ['tenant_id'], unique=False)
    op.create_index('ix_model_access_logs_tenant_model_time', 'model_access_logs', ['tenant_id', 'model_id', 'created_at'], unique=False)
    op.create_index('ix_model_access_logs_tenant_model_user', 'model_access_logs', ['tenant_id', 'model_id', 'user_id'], unique=False)
    op.create_index('ix_model_access_logs_tenant_user_time', 'model_access_logs', ['tenant_id', 'user_id', 'created_at'], unique=False)
    op.create_table('model_permissions',
    sa.Column('model_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='The model to which this permission applies'),
    sa.Column('user_id', mssql.UNIQUEIDENTIFIER(), nullable=True, comment='Target user for this permission (if applicable)'),
    sa.Column('organization_id', mssql.UNIQUEIDENTIFIER(), nullable=True, comment='Target organization for this permission (if applicable)'),
    sa.Column('team_id', mssql.UNIQUEIDENTIFIER(), nullable=True, comment='Target team for this permission (if applicable)'),
    sa.Column('permission_level', sa.NVARCHAR(length=20), nullable=False, server_default=sa.text("'read'"), comment="Access level ('read', 'write', 'execute', 'admin')"),
    sa.Column('is_active', sa.Boolean(), nullable=False, server_default=sa.text('1'), comment='Whether the permission is currently active'),
    sa.Column('valid_from', sa.DateTime(), nullable=True, comment='When the permission becomes valid (optional)'),
    sa.Column('valid_until', sa.DateTime(), nullable=True, comment='When the permission expires (optional)'),
    sa.Column('granted_by_user_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='User who granted this permission'),
    sa.Column('granted_at', sa.DateTime(), nullable=False, server_default=sa.text('GETUTCDATE()'), comment='When the permission was granted'),
    sa.Column('revoked_by_user_id', mssql.UNIQUEIDENTIFIER(), nullable=True, comment='User who revoked the permission'),
    sa.Column('revoked_at', sa.DateTime(), nullable=True, comment='When the permission was revoked'),
    sa.Column('notes', sa.NVARCHAR(length=500), nullable=True, comment='Notes about this permission grant/revocation'),
    sa.Column('id', mssql.UNIQUEIDENTIFIER(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', mssql.UNIQUEIDENTIFIER(), nullable=False, comment='Multi-tenant isolation key'),
    sa.CheckConstraint("permission_level IN ('read', 'write', 'execute', 'admin')", name='ck_model_permissions_level'),
    sa.CheckConstraint('\n            (user_id IS NOT NULL AND organization_id IS NULL AND team_id IS NULL) OR\n            (user_id IS NULL AND organization_id IS NOT NULL AND team_id IS NULL) OR\n            (user_id IS NULL AND organization_id IS NULL AND team_id IS NOT NULL)\n            ', name='ck_model_permissions_single_target'),
    sa.ForeignKeyConstraint(['granted_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['revoked_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id', mssql_clustered=False),
    sa.UniqueConstraint('index_id')
    )
    op.create_index(op.f('ix_model_permissions_is_deleted'), 'model_permissions', ['is_deleted'], unique=False)
    op.create_index('ix_model_permissions_tenant_active_status', 'model_permissions', ['tenant_id', 'index_id'], unique=False)
    op.create_index(op.f('ix_model_permissions_tenant_id'), 'model_permissions', ['tenant_id'], unique=False)
    op.create_index('ix_model_permissions_tenant_model', 'model_permissions', ['tenant_id', 'model_id', 'is_active'], unique=False)
    op.create_index('ix_model_permissions_tenant_organization', 'model_permissions', ['tenant_id', 'organization_id', 'model_id', 'is_active'], unique=False)
    op.create_index('ix_model_permissions_tenant_team', 'model_permissions', ['tenant_id', 'team_id', 'model_id', 'is_active'], unique=False)
    op.create_index('ix_model_permissions_tenant_user', 'model_permissions', ['tenant_id', 'user_id', 'model_id', 'is_active'], unique=False)
    op.create_index('ix_model_permissions_valid_until', 'model_permissions', ['valid_until'], unique=False)
    op.drop_index(op.f('ix_models_tenant_active'), table_name='models', mssql_where='([is_deleted]=(0))')
    op.drop_index(op.f('ix_models_tenant_id_lookup'), table_name='models', mssql_where='([is_deleted]=(0))')
    op.drop_index(op.f('ix_tenants_active'), table_name='tenants', mssql_where='([is_deleted]=(0))')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('ix_tenants_active'), 'tenants', ['is_deleted'], unique=False, mssql_where='([is_deleted]=(0))')
    op.create_index(op.f('ix_models_tenant_id_lookup'), 'models', ['tenant_id', 'id'], unique=False, mssql_where='([is_deleted]=(0))')
    op.create_index(op.f('ix_models_tenant_active'), 'models', ['tenant_id', 'is_deleted', 'index_id'], unique=False, mssql_where='([is_deleted]=(0))')
    op.drop_index('ix_model_permissions_valid_until', table_name='model_permissions')
    op.drop_index('ix_model_permissions_tenant_user', table_name='model_permissions')
    op.drop_index('ix_model_permissions_tenant_team', table_name='model_permissions')
    op.drop_index('ix_model_permissions_tenant_organization', table_name='model_permissions')
    op.drop_index('ix_model_permissions_tenant_model', table_name='model_permissions')
    op.drop_index(op.f('ix_model_permissions_tenant_id'), table_name='model_permissions')
    op.drop_index('ix_model_permissions_tenant_active_status', table_name='model_permissions')
    op.drop_index(op.f('ix_model_permissions_is_deleted'), table_name='model_permissions')
    op.drop_table('model_permissions')
    op.drop_index('ix_model_access_logs_tenant_user_time', table_name='model_access_logs')
    op.drop_index('ix_model_access_logs_tenant_model_user', table_name='model_access_logs')
    op.drop_index('ix_model_access_logs_tenant_model_time', table_name='model_access_logs')
    op.drop_index(op.f('ix_model_access_logs_tenant_id'), table_name='model_access_logs')
    op.drop_index('ix_model_access_logs_session', table_name='model_access_logs')
    op.drop_index(op.f('ix_model_access_logs_is_deleted'), table_name='model_access_logs')
    op.drop_index('ix_model_access_logs_access_type', table_name='model_access_logs')
    op.drop_index('ix_model_access_logs_access_result', table_name='model_access_logs')
    op.drop_table('model_access_logs')
    # ### end Alembic commands ###
